---
// src/pages/calculators/zip-lookup/[country]/[code].astro
import Layout from "../../../../layouts/Layout.astro";
import GpaLayout from "../../../../components/GpaLayout";
import ZipLookup from "../../../../components/ZipLookup";
import {
  getCodeInfo,
  getAllCodes,
  countryNames,
  countryFormats,
} from "../../../../data/postal-codes";
import { twZipCodes } from "../../../../data/tw-zip-codes";

export async function getStaticPaths() {
  // Generate paths for all countries and their codes
  const countries = ["us", "ca", "tw", "ph"];
  const paths = [];

  countries.forEach((country) => {
    const codes = getAllCodes(country);
    codes.forEach((code) => {
      const info = getCodeInfo(country, code);
      if (info) {
        paths.push({
          params: { country, code },
          props: { countryInfo: info },
        });
      }
    });
  });

  return paths;
}

const { country, code } = Astro.params;
const { countryInfo } = Astro.props;

const title = `${code} ${countryNames[country]} Postal Code - ${countryInfo.formattedName}`;
const description = `Complete information for ${code} postal code in ${countryInfo.formattedName}, ${countryNames[country]}. Find detailed address and location data.`;
const keywords = `${code} postal code, ${code} ${countryNames[country]}, ${countryInfo.formattedName} postal code, ${code} lookup`;
---

<Layout
  title={title}
  description={description}
  keywords={keywords}
  currentUrl={Astro.url.pathname}
>
  <GpaLayout client:load {title} {description} {keywords}>
    <div class="space-y-12">
      {/* Hero Section */}
      <div
        class="bg-surface-light dark:bg-surface-dark-hover rounded-2xl border border-gray-200/10 dark:border-gray-800/10 overflow-hidden"
      >
        <div
          class="bg-gradient-to-r from-accent-primary/10 to-accent-secondary/10 p-6 md:p-8"
        >
          <h1 class="text-4xl font-display font-bold text-center mb-4">
            {code} - {countryInfo.formattedName}
          </h1>
          <p
            class="text-center text-content-light-dimmed dark:text-content-dark-dimmed mb-8"
          >
            {countryNames[country]} Postal Code Information
          </p>
          <ZipLookup client:load defaultCountry={country} defaultQuery={code} />
        </div>
      </div>

      {/* Location Information */}
      <div
        class="bg-surface-light dark:bg-surface-dark-hover rounded-xl p-6 border border-gray-200/10 dark:border-gray-800/10"
      >
        <h2 class="text-2xl font-display font-bold mb-6">Location Details</h2>
        <div class="grid gap-4">
          {
            Object.entries(countryInfo).map(
              ([key, value]) =>
                // Skip internal fields
                !["formattedName"].includes(key) && (
                  <div class="flex justify-between items-center p-4 bg-surface-light-hover dark:bg-surface-dark rounded-lg">
                    <span class="text-content-light-dimmed dark:text-content-dark-dimmed capitalize">
                      {key.replace(/([A-Z])/g, " $1").trim()}:
                    </span>
                    <span class="font-medium">{value}</span>
                  </div>
                )
            )
          }
        </div>
      </div>

      {/* Format Guide */}
      <div
        class="bg-surface-light dark:bg-surface-dark-hover rounded-xl p-6 border border-gray-200/10 dark:border-gray-800/10"
      >
        <h2 class="text-2xl font-display font-bold mb-6">
          {countryNames[country]} Postal Code Format
        </h2>
        <div class="space-y-4">
          <div
            class="p-4 bg-surface-light-hover dark:bg-surface-dark rounded-lg"
          >
            <p class="text-content-light-dimmed dark:text-content-dark-dimmed">
              {countryFormats[country]}
            </p>
          </div>
        </div>
      </div>

      {/* Related Codes */}
      <div
        class="bg-surface-light dark:bg-surface-dark-hover rounded-xl p-6 border border-gray-200/10 dark:border-gray-800/10"
      >
        <h2 class="text-2xl font-display font-bold mb-6">Related Locations</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
          {/* Show nearby codes - specific to each country's format */}
          {
            country === "tw" &&
              countryInfo.city &&
              // For Taiwan, show other districts in same city
              Object.entries(twZipCodes[countryInfo.city])
                .filter(([dist, zip]) => zip !== code)
                .slice(0, 8)
                .map(([district, zip]) => (
                  <a
                    href={`/calculators/zip-lookup/tw/${zip}`}
                    class="p-4 bg-surface-light-hover dark:bg-surface-dark rounded-lg hover:bg-accent-primary/5 transition-colors text-center"
                  >
                    <div class="font-mono font-medium text-accent-primary mb-1">
                      {zip}
                    </div>
                    <div class="text-sm text-content-light-dimmed dark:text-content-dark-dimmed">
                      {district}
                    </div>
                  </a>
                ))
          }

          {/* For other countries, show codes with similar prefixes */}
          {
            (country === "us" || country === "ca" || country === "ph") &&
              getAllCodes(country)
                .filter(
                  (c) =>
                    c !== code && c.substring(0, 2) === code.substring(0, 2)
                )
                .slice(0, 8)
                .map((relatedCode) => {
                  const info = getCodeInfo(country, relatedCode);
                  return (
                    <a
                      href={`/calculators/zip-lookup/${country}/${relatedCode}`}
                      class="p-4 bg-surface-light-hover dark:bg-surface-dark rounded-lg hover:bg-accent-primary/5 transition-colors text-center"
                    >
                      <div class="font-mono font-medium text-accent-primary mb-1">
                        {relatedCode}
                      </div>
                      <div class="text-sm text-content-light-dimmed dark:text-content-dark-dimmed">
                        {info.formattedName}
                      </div>
                    </a>
                  );
                })
          }
        </div>
      </div>
    </div>
  </GpaLayout>
</Layout>
